name: CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="randpass-$GOOS-$GOARCH.exe"
        else
          BINARY_NAME="randpass-$GOOS-$GOARCH"
        fi
        go build -ldflags="-s -w" -o "dist/$BINARY_NAME" ./cmd/randpass
        echo "Built: dist/$BINARY_NAME"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Prepare release assets
      run: |
        mkdir -p release
        find dist/ -name "randpass-*" -type f -exec cp {} release/ \;
        ls -la release/

    - name: Create checksums
      run: |
        cd release
        sha256sum randpass-* > checksums.txt
        cat checksums.txt

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/randpass-*
          release/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./internal/generator > benchmark.txt
        cat benchmark.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt
